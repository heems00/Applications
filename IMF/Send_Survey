#!python3
#imfSendSurvey.py
#The program automatically sends out the surveys via text messaging, and email.
#TextMessagingAPI - Twilio
#EmailMessagingAPI - Gmail, Forms
#Time Schedule - Sunday Night @ 7pm MST

#Modules
from twilio.rest import Client
import ezgmail

from google.auth.transport.requests import Request
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError

import schedule
import time
from datetime import datetime
import pytz

#Set Values
    #Twilio API
accountSID =''
authToken = ''
twilioNumber = '+'
    #Google API
google_forms_link = 'https://forms.gle/jX5HwDMQfa9W7Zff9'
SCOPES = ['https://www.googleapis.com/auth/gmail.readonly', 'https://www.googleapis.com/auth/gmail.modify', 'https://www.googleapis.com/auth/gmail.send', 'https://www.googleapis.com/auth/gmail.compose', 'https://www.googleapis.com/auth/gmail.metadata']

#IMF Contacts
imf_contacts = {'name_contact': {'phone': '', 'email': ''}} #To Add example - ", 'John_doe': 'phone': None, 'email': 'email@gmail.com'}}

#Function - Send SMS With Survey Link
def send_survey_sms(account_sid, auth_token, twilio_number, recipient_number, message_body):
    try:
        client = Client(account_sid, auth_token)
        message = client.messages.create(body=message_body, from_=twilio_number, to=recipient_number)
        print(f"Survey sent to {recipient_number}: {message.sid}")
    except Exception as e:
        print(f"An error occurred while sending SMS: {e}")

#Function - Send Email With Survey Link
def send_survey_email(recipient_email, subject, message_body):
    try:
        html_format_message_body = f"""
        <html>
            <body>
                <p>Welcome!</p>
                <p>This is an invitation to participate in the <b>IM Films Survey</b>.</p>
                <p>This survey is sent out every Sunday night at 7pm MST.  What did you consume this week worth adding to the tracker??</p>
                <p>At IM Films, we are seeking to better understand what makes a good movie or TV show, and provide consumers a movie rankings tracker where 
                the scores and rankings are determined by its contributors.</p>
                <p>If you would like to contribute to the tracker, please click on the link below to access the survey:</p>
                <p><a href="{google_forms_link}">{google_forms_link}</a></p>
                <p>We value your feedback and stay tuned for public access to the tracker.</p>
                <p>Thank you for your time and contribution!</p>
                <p>Best regards,<br>IM Films Team<br>@IntangiblesMatterFilms</p>
            </body>
        </html>
        """
        ezgmail.init()
        ezgmail.send(recipient_email, subject, html_format_message_body, mimeSubtype='html')
        print(f"Survey email sent to {recipient_email}")
    except Exception as e:
        print(f"An error occured while sending emails: {e}")

#Program Executing The Above Functions
def send_surveys():
    print(f"Running survey distribution at {datetime.now(pytz.timezone('America/Denver')).strftime('%Y-%m-%d %H:%M:%S %Z')}")
    #Automated SMS Message
    sms_automated_message = (
        "Welcome! and thank you for subscribing to the Intangibles Matter Films survey. "
        "This text is sent out at 7pm MST every Sunday Night.\n\n"  
        "If you watched anything worth noting this week please contribute to the tracker.  "
        "We value your contribution and would appreciate it if you could take a few minutes to complete our survey.\n\n"
        f"Please click on the following link to complete the survey - {google_forms_link}\n\n"
        "Thank you,\n@IntangiblesMatterFilms"
    )
    email_subject = 'IM Films Survey Invititation'

    #Specifics - If a verified phone number exists for the contact, send an SMS.  Or else, send the survey via the contacts email.
    for name, contact_info in imf_contacts.items():
        phone = contact_info.get('phone')
        email = contact_info.get('email')
        
        if phone:
            print(f"Sending SMS to {name} at {phone}...")
            send_survey_sms(accountSID, authToken, twilioNumber, phone, sms_automated_message)
        elif email:
            print(f"Sending Email to {name} at {email}...")
            send_survey_email(email, email_subject, "")
        else:
            print(f"No contact information available for {name}.  Skipping...")

#Schedule Program To Run Every Sunday at 7pm MST, Keep Script Running Continously
schedule.every().sunday.at('19:00').do(send_surveys)
print('Survey automation started. Waiting for scheduled time...')
while True:
    schedule.run_pending()
    time.sleep(1)
